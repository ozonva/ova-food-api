// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ova-food-api/ova-food-api.proto

package ova_food_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on CreationFood with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CreationFood) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for FoodT

	// no validation rules for Name

	// no validation rules for PortionSize

	return nil
}

// CreationFoodValidationError is the validation error returned by
// CreationFood.Validate if the designated constraints aren't met.
type CreationFoodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreationFoodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreationFoodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreationFoodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreationFoodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreationFoodValidationError) ErrorName() string { return "CreationFoodValidationError" }

// Error satisfies the builtin error interface
func (e CreationFoodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreationFood.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreationFoodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreationFoodValidationError{}

// Validate checks the field values on Food with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Food) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FoodId

	// no validation rules for UserId

	// no validation rules for FoodT

	// no validation rules for Name

	// no validation rules for PortionSize

	return nil
}

// FoodValidationError is the validation error returned by Food.Validate if the
// designated constraints aren't met.
type FoodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FoodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FoodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FoodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FoodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FoodValidationError) ErrorName() string { return "FoodValidationError" }

// Error satisfies the builtin error interface
func (e FoodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFood.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FoodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FoodValidationError{}

// Validate checks the field values on MultiCreateFoodsV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateFoodsV1Request) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetFoods() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateFoodsV1RequestValidationError{
					field:  fmt.Sprintf("Foods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreateFoodsV1RequestValidationError is the validation error returned by
// MultiCreateFoodsV1Request.Validate if the designated constraints aren't met.
type MultiCreateFoodsV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateFoodsV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateFoodsV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateFoodsV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateFoodsV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateFoodsV1RequestValidationError) ErrorName() string {
	return "MultiCreateFoodsV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateFoodsV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateFoodsV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateFoodsV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateFoodsV1RequestValidationError{}

// Validate checks the field values on PageFoodsV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PageFoodsV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// PageFoodsV1RequestValidationError is the validation error returned by
// PageFoodsV1Request.Validate if the designated constraints aren't met.
type PageFoodsV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageFoodsV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageFoodsV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageFoodsV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageFoodsV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageFoodsV1RequestValidationError) ErrorName() string {
	return "PageFoodsV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PageFoodsV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageFoodsV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageFoodsV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageFoodsV1RequestValidationError{}

// Validate checks the field values on PageFoodsV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PageFoodsV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Foods

	return nil
}

// PageFoodsV1ResponseValidationError is the validation error returned by
// PageFoodsV1Response.Validate if the designated constraints aren't met.
type PageFoodsV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageFoodsV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageFoodsV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageFoodsV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageFoodsV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageFoodsV1ResponseValidationError) ErrorName() string {
	return "PageFoodsV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PageFoodsV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageFoodsV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageFoodsV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageFoodsV1ResponseValidationError{}

// Validate checks the field values on UpdateFoodV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateFoodV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFood()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFoodV1RequestValidationError{
				field:  "Food",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateFoodV1RequestValidationError is the validation error returned by
// UpdateFoodV1Request.Validate if the designated constraints aren't met.
type UpdateFoodV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFoodV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFoodV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFoodV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFoodV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFoodV1RequestValidationError) ErrorName() string {
	return "UpdateFoodV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFoodV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFoodV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFoodV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFoodV1RequestValidationError{}

// Validate checks the field values on CreateFoodV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateFoodV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFood()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFoodV1RequestValidationError{
				field:  "Food",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateFoodV1RequestValidationError is the validation error returned by
// CreateFoodV1Request.Validate if the designated constraints aren't met.
type CreateFoodV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFoodV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFoodV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFoodV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFoodV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFoodV1RequestValidationError) ErrorName() string {
	return "CreateFoodV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFoodV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFoodV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFoodV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFoodV1RequestValidationError{}

// Validate checks the field values on DescribeFoodV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeFoodV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FoodId

	return nil
}

// DescribeFoodV1RequestValidationError is the validation error returned by
// DescribeFoodV1Request.Validate if the designated constraints aren't met.
type DescribeFoodV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeFoodV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeFoodV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeFoodV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeFoodV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeFoodV1RequestValidationError) ErrorName() string {
	return "DescribeFoodV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeFoodV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeFoodV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeFoodV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeFoodV1RequestValidationError{}

// Validate checks the field values on DescribeFoodV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeFoodV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFood()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeFoodV1ResponseValidationError{
				field:  "Food",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeFoodV1ResponseValidationError is the validation error returned by
// DescribeFoodV1Response.Validate if the designated constraints aren't met.
type DescribeFoodV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeFoodV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeFoodV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeFoodV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeFoodV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeFoodV1ResponseValidationError) ErrorName() string {
	return "DescribeFoodV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeFoodV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeFoodV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeFoodV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeFoodV1ResponseValidationError{}

// Validate checks the field values on ListFoodsV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListFoodsV1Request) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListFoodsV1RequestValidationError is the validation error returned by
// ListFoodsV1Request.Validate if the designated constraints aren't met.
type ListFoodsV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFoodsV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFoodsV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFoodsV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFoodsV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFoodsV1RequestValidationError) ErrorName() string {
	return "ListFoodsV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFoodsV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFoodsV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFoodsV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFoodsV1RequestValidationError{}

// Validate checks the field values on ListFoodsV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListFoodsV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Foods

	return nil
}

// ListFoodsV1ResponseValidationError is the validation error returned by
// ListFoodsV1Response.Validate if the designated constraints aren't met.
type ListFoodsV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFoodsV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFoodsV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFoodsV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFoodsV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFoodsV1ResponseValidationError) ErrorName() string {
	return "ListFoodsV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFoodsV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFoodsV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFoodsV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFoodsV1ResponseValidationError{}

// Validate checks the field values on RemoveFoodV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveFoodV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FoodId

	return nil
}

// RemoveFoodV1RequestValidationError is the validation error returned by
// RemoveFoodV1Request.Validate if the designated constraints aren't met.
type RemoveFoodV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveFoodV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveFoodV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveFoodV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveFoodV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveFoodV1RequestValidationError) ErrorName() string {
	return "RemoveFoodV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveFoodV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveFoodV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveFoodV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveFoodV1RequestValidationError{}
